/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.laoge.raining.server.route;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-28")
public class RainResponse implements org.apache.thrift.TBase<RainResponse, RainResponse._Fields>, java.io.Serializable, Cloneable, Comparable<RainResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RainResponse");

  private static final org.apache.thrift.protocol.TField RESPONSE_HEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("responseHead", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField RESPONSE_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("responseBody", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RainResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RainResponseTupleSchemeFactory();

  public RainResponseHead responseHead; // required
  public RainResponseBody responseBody; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESPONSE_HEAD((short)1, "responseHead"),
    RESPONSE_BODY((short)2, "responseBody");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESPONSE_HEAD
          return RESPONSE_HEAD;
        case 2: // RESPONSE_BODY
          return RESPONSE_BODY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESPONSE_HEAD, new org.apache.thrift.meta_data.FieldMetaData("responseHead", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RainResponseHead.class)));
    tmpMap.put(_Fields.RESPONSE_BODY, new org.apache.thrift.meta_data.FieldMetaData("responseBody", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RainResponseBody.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RainResponse.class, metaDataMap);
  }

  public RainResponse() {
  }

  public RainResponse(
    RainResponseHead responseHead,
    RainResponseBody responseBody)
  {
    this();
    this.responseHead = responseHead;
    this.responseBody = responseBody;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RainResponse(RainResponse other) {
    if (other.isSetResponseHead()) {
      this.responseHead = new RainResponseHead(other.responseHead);
    }
    if (other.isSetResponseBody()) {
      this.responseBody = new RainResponseBody(other.responseBody);
    }
  }

  public RainResponse deepCopy() {
    return new RainResponse(this);
  }

  @Override
  public void clear() {
    this.responseHead = null;
    this.responseBody = null;
  }

  public RainResponseHead getResponseHead() {
    return this.responseHead;
  }

  public RainResponse setResponseHead(RainResponseHead responseHead) {
    this.responseHead = responseHead;
    return this;
  }

  public void unsetResponseHead() {
    this.responseHead = null;
  }

  /** Returns true if field responseHead is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseHead() {
    return this.responseHead != null;
  }

  public void setResponseHeadIsSet(boolean value) {
    if (!value) {
      this.responseHead = null;
    }
  }

  public RainResponseBody getResponseBody() {
    return this.responseBody;
  }

  public RainResponse setResponseBody(RainResponseBody responseBody) {
    this.responseBody = responseBody;
    return this;
  }

  public void unsetResponseBody() {
    this.responseBody = null;
  }

  /** Returns true if field responseBody is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseBody() {
    return this.responseBody != null;
  }

  public void setResponseBodyIsSet(boolean value) {
    if (!value) {
      this.responseBody = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESPONSE_HEAD:
      if (value == null) {
        unsetResponseHead();
      } else {
        setResponseHead((RainResponseHead)value);
      }
      break;

    case RESPONSE_BODY:
      if (value == null) {
        unsetResponseBody();
      } else {
        setResponseBody((RainResponseBody)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESPONSE_HEAD:
      return getResponseHead();

    case RESPONSE_BODY:
      return getResponseBody();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESPONSE_HEAD:
      return isSetResponseHead();
    case RESPONSE_BODY:
      return isSetResponseBody();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RainResponse)
      return this.equals((RainResponse)that);
    return false;
  }

  public boolean equals(RainResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_responseHead = true && this.isSetResponseHead();
    boolean that_present_responseHead = true && that.isSetResponseHead();
    if (this_present_responseHead || that_present_responseHead) {
      if (!(this_present_responseHead && that_present_responseHead))
        return false;
      if (!this.responseHead.equals(that.responseHead))
        return false;
    }

    boolean this_present_responseBody = true && this.isSetResponseBody();
    boolean that_present_responseBody = true && that.isSetResponseBody();
    if (this_present_responseBody || that_present_responseBody) {
      if (!(this_present_responseBody && that_present_responseBody))
        return false;
      if (!this.responseBody.equals(that.responseBody))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetResponseHead()) ? 131071 : 524287);
    if (isSetResponseHead())
      hashCode = hashCode * 8191 + responseHead.hashCode();

    hashCode = hashCode * 8191 + ((isSetResponseBody()) ? 131071 : 524287);
    if (isSetResponseBody())
      hashCode = hashCode * 8191 + responseBody.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(RainResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResponseHead()).compareTo(other.isSetResponseHead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseHead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseHead, other.responseHead);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponseBody()).compareTo(other.isSetResponseBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseBody, other.responseBody);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RainResponse(");
    boolean first = true;

    sb.append("responseHead:");
    if (this.responseHead == null) {
      sb.append("null");
    } else {
      sb.append(this.responseHead);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseBody:");
    if (this.responseBody == null) {
      sb.append("null");
    } else {
      sb.append(this.responseBody);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (responseHead != null) {
      responseHead.validate();
    }
    if (responseBody != null) {
      responseBody.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RainResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RainResponseStandardScheme getScheme() {
      return new RainResponseStandardScheme();
    }
  }

  private static class RainResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<RainResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RainResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // RESPONSE_HEAD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.responseHead = new RainResponseHead();
              struct.responseHead.read(iprot);
              struct.setResponseHeadIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESPONSE_BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.responseBody = new RainResponseBody();
              struct.responseBody.read(iprot);
              struct.setResponseBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RainResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.responseHead != null) {
        oprot.writeFieldBegin(RESPONSE_HEAD_FIELD_DESC);
        struct.responseHead.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.responseBody != null) {
        oprot.writeFieldBegin(RESPONSE_BODY_FIELD_DESC);
        struct.responseBody.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RainResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RainResponseTupleScheme getScheme() {
      return new RainResponseTupleScheme();
    }
  }

  private static class RainResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<RainResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RainResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetResponseHead()) {
        optionals.set(0);
      }
      if (struct.isSetResponseBody()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetResponseHead()) {
        struct.responseHead.write(oprot);
      }
      if (struct.isSetResponseBody()) {
        struct.responseBody.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RainResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.responseHead = new RainResponseHead();
        struct.responseHead.read(iprot);
        struct.setResponseHeadIsSet(true);
      }
      if (incoming.get(1)) {
        struct.responseBody = new RainResponseBody();
        struct.responseBody.read(iprot);
        struct.setResponseBodyIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

